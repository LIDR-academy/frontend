/**
 * This code was generated by Builder.io
 */
import { faArrowLeft } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import React, { useEffect, useState } from "react";
import { Button, Col, Container, Row } from "react-bootstrap";
import { DndProvider } from "react-dnd";
import { HTML5Backend } from "react-dnd-html5-backend";
import { useNavigate, useParams } from "react-router-dom";
import { ICandidateProps } from "./Candidate";
import InterviewStage from "./InterviewStage";

export interface IInterviewStep {
  id: number;
  interviewFlowId: number;
  interviewTypeId: number;
  name: string;
  orderIndex: number;
}

export interface IInterviewFlow {
  id: number;
  description: string;
  interviewSteps: IInterviewStep[];
}

export interface IInterviewStage {
  positionName: string;
  interviewFlow: IInterviewFlow;
}

const InterviewProcess: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [interviewStages, setInterviewStages] = useState<IInterviewStage>();
  const [candidates, setCandidates] = useState<ICandidateProps[]>([]);

  useEffect(() => {
    const fetchCandidates = async () => {
      try {
        const response = await fetch(
          `http://localhost:3010/position/${id}/candidates`
        );
        const data = await response.json();
        setCandidates(data);
      } catch (error) {
        console.error("Error fetching candidates:", error);
      }
    };

    const fetchInterviewFlow = async () => {
      try {
        const response = await fetch(
          `http://localhost:3010/position/${id}/interviewflow`
        );
        const data = await response.json();
        setInterviewStages(data.interviewFlow);
      } catch (error) {
        console.error("Error fetching interview flow:", error);
      }
    };

    fetchCandidates();
    fetchInterviewFlow();
  }, [id]);

  const handleDrop = async (candidateId: string, newStepId: number) => {
    const candidate = candidates.find((c) => c.candidateId === candidateId);

    try {
      await fetch(`http://localhost:3010/candidates/${candidateId}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          applicationId: candidate?.applicationId,
          currentInterviewStep: String(newStepId),
        }),
      });

      // Fetch the updated candidates list
      const response = await fetch(
        `http://localhost:3010/position/${id}/candidates`
      );
      const data = await response.json();
      setCandidates(data);
    } catch (error) {
      console.error("Error updating candidate:", error);
    }
  };

  return (
    <DndProvider backend={HTML5Backend}>
      <Container>
        <Button variant="link" onClick={() => navigate("/positions")}>
          <FontAwesomeIcon icon={faArrowLeft} /> Back to Positions
        </Button>
        <h2 className="text-center mb-4">{interviewStages?.positionName}</h2>
        <Row>
          {interviewStages?.interviewFlow.interviewSteps.map((stage) => {
            const stageCandidates = candidates.filter(
              (candidate) => candidate.currentInterviewStep === stage.name
            );
            return (
              <Col xs={12} md={6} lg={4} key={stage.id} className="mb-4">
                <InterviewStage
                  id={stage.id}
                  title={stage.name}
                  candidates={stageCandidates}
                  onDrop={handleDrop}
                />
              </Col>
            );
          })}
        </Row>
      </Container>
    </DndProvider>
  );
};

export default InterviewProcess;
